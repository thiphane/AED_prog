@startuml
abstract class entity.student.StudentAbstract implements entity.student.Student {
- String name
- String country
- LodgingService home
- Service location
- void setHome(LodgingService)
}

class app.BoundsClass extends app.Bounds {
- String name
- Position topPosition
- Position bottomPosition
~ StudentStorage students
~ ServiceStorage services
}


class entity.service.LeisureService extends entity.service.ServiceAbstract {
}


interface app.CampusApp {
~ void createBounds(String,long,long,long,long)
~ Bounds saveCurrentArea()
~ Bounds loadArea(String)
~ void createService(String,String,long,long,int,int)
~ void createStudent(String,String,String,String)
~ Student getStudent(String)
~ Service getService(String)
~ Student removeStudent(String)
~ boolean updateStudentPosition(Student,Service)
~ void moveHome(String,String)
~ void rateService(int,String,String)
~ TwoWayIterator<Student> getUsersByService(String,Order)
~ Iterator<Student> listAllStudents()
~ Iterator<Student> listStudentsByCountry(String)
~ Iterator<Service> listAllServices()
~ Iterator<Service> listVisitedServices(Student)
~ Iterator<Service> listServicesByRanking()
~ Iterator<Service> listClosestServicesByStudent(int,String,String)
~ Iterator<Service> listServicesByTag(String)
~ Service findBestService(String,String)
}

class entity.student.BookishStudent extends entity.student.StudentAbstract  {
# List<Service> visited
}


class entity.student.ThriftyStudent extends entity.student.StudentAbstract {
~ EatingService cheapestEating
}

interface entity.student.Student {
~ String getCountry()
~ String getName()
~ Service getLocation()
~ StudentType getType()
~ Service getHome()
~ void moveHome(LodgingService)
~ void updatePosition(Service)
~ Service findBestService(Iterator<Service>)
~ Iterator<Service> getVisitedServices()
~ Iterator<Service> findClosestServices(Iterator<Service>)
}

class app.ServiceRatePredicate {
~ int rate
+ boolean check(Service)
}


class entity.student.OutgoingStudent extends entity.student.StudentAbstract {
# List<Service> visited
}


interface entity.service.StudentStoringService extends entity.service.Service {
~ void addUser(Student)
~ void removeUser(Student)
~ TwoWayIterator<Student> getUsers()
}

class app.AlphabeticalStudentComparator {
+ int compare(Student,Student)
}

class entity.student.DistanceComparator {
- Position position
+ int compare(Service,Service)
}

class app.ByCountryPredicate {
~ String country
+ boolean check(Student)
}


class entity.service.LodgingService extends entity.service.AbstractStudentStoringService {
}

class app.ServiceStarComparator {
+ int compare(Service,Service)
}

class app.StudentStorage {
# List<Student> students
# SortedList<Student> alphabeticalStudents
+ void addStudent(Student)
+ Student getStudent(String)
+ Student removeStudent(Student)
+ void updateStudentLocation(Student,Service)
+ void moveHome(String,LodgingService)
+ Iterator<Student> getAllStudents()
+ Iterator<Student> getStudentsByCountry(String)
+ Iterator<Service> listVisitedServices(Student)
+ Service findBestService(Student,ServiceType,Iterator<Service>)
+ Iterator<Service> findClosestService(String,Iterator<Service>)
- void readObject(ObjectInputStream)
}


interface app.Bounds {
~ {static} String getBoundFilename(String)
~ String getName()
~ Position getTopPosition()
~ Position getBottomPosition()
~ void save()
~ boolean isInside(Position)
~ Student removeStudent(String)
~ void addService(Service)
~ Student getStudent(String)
~ void updateStudentLocation(Student,Service)
~ void moveHome(String,LodgingService)
~ Iterator<Student> getAllStudents()
~ Iterator<Student> getStudentsByCountry(String)
~ Iterator<Service> listAllServices()
~ Service findBestService(String,ServiceType)
~ Iterator<Service> listVisitedServices(Student)
~ Iterator<Service> findClosestService(String,Iterator<Service>)
~ void addStudent(Student)
~ Service getService(String)
~ Iterator<Service> listServicesByRating()
~ void addRating(int,String,String)
}

class app.ServiceStorage {
# List<Service> services
# SortedList<Service> servicesByStar
+ void addService(Service)
+ void rateService(String,int,String)
+ Service getService(String)
+ Iterator<Service> listAllServices()
~ Iterator<Service> listServicesByRanking()
- void readObject(ObjectInputStream)
}

abstract class entity.service.ServiceAbstract implements entity.service.Service {
- String name
- Position position
- int price
- int value
~ int rating
~ List<String> ratings
# int getValue()
}


class app.ServiceTagPredicate {
- String tag
+ boolean check(Service)
}

class entity.service.EatingService extends entity.service.AbstractStudentStoringService {
}

enum entity.service.ServiceType {
+  LEISURE
+  EATING
+  LODGING
+ {static} ServiceType getType(String)
}

class app.CampusAppClass extends app.CampusApp {
~ Bounds currentBounds
}

enum app.Order {
+  OLD_TO_NEW
+  NEW_TO_OLD
}

enum entity.student.StudentType {
+  THRIFTY
+  OUTGOING
+  BOOKISH
+ {static} StudentType getType(String)
}

record app.Position {
+ long longitude()
+ long latitude()
+ long getManhattanDistance(Position)
}


abstract class entity.service.AbstractStudentStoringService extends entity.service.ServiceAbstract implements entity.service.StudentStoringService {
- TwoWayList<Student> users
}

interface entity.service.Service {
~ String getName()
~ ServiceType getType()
~ Position getPosition()
~ void addRating(int,String)
~ int getRating()
~ float getRealRating()
~ int getPrice()
~ boolean hasTag(String)
}

class app.ServiceTypePredicate {
- ServiceType type
+ boolean check(Service)
}

app.BoundsClass ..> app.ServiceStorage : Use
app.BoundsClass ..> app.StudentStorage : Use

entity.student.DistanceComparator ..[hidden]> entity.student.StudentType
@enduml