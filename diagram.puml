@startuml
abstract class campus_app.entity.student.StudentAbstract implements campus_app.entity.student.Student {
- String name
- String country
- LodgingService home
- Service location
- void setHome(LodgingService)
+ String getCountry()
+ Service getHome()
+ void moveHome(LodgingService)
+ void updatePosition(Service)
+ String getName()
+ Service getLocation()
+ Iterator<Service> findClosestServices(Iterator<Service>)
+ boolean equals(Object)
+ Service findBestService(Iterator<Service>)
}

class campus_app.app.BoundsClass extends campus_app.app.Bounds {
- String name
- Position topPosition
- Position bottomPosition
~ StudentStorage students
~ ServiceStorage services
+ Student getStudent(String)
+ Student removeStudent(String)
+ void updateStudentLocation(Student,Service)
+ void moveHome(String,LodgingService)
+ Iterator<Student> getAllStudents()
+ Iterator<Student> getStudentsByCountry(String)
+ Iterator<Service> listAllServices()
+ Service findBestService(String,ServiceType)
+ Iterator<Service> listVisitedServices(Student)
+ void addService(Service)
+ String getName()
+ Position getTopPosition()
+ Position getBottomPosition()
+ void save()
+ boolean isInside(Position)
+ {static} Bounds loadBounds(String)
+ Iterator<Service> findClosestService(String,Iterator<Service>)
+ void addStudent(Student)
+ Service getService(String)
+ Iterator<Service> listServicesByRating()
+ void addRating(int,String,String)
}


class campus_app.entity.service.LeisureService extends campus_app.entity.service.ServiceAbstract {
- {static} ServiceType TYPE
+ int getPrice()
+ ServiceType getType()
}


interface campus_app.app.CampusApp {
~ void createBounds(String,long,long,long,long)
~ Bounds saveCurrentArea()
~ Bounds loadArea(String)
~ void createService(String,String,long,long,int,int)
~ void createStudent(String,String,String,String)
~ Student getStudent(String)
~ Service getService(String)
~ Student removeStudent(String)
~ boolean updateStudentPosition(Student,Service)
~ void moveHome(String,String)
~ void rateService(int,String,String)
~ TwoWayIterator<Student> getUsersByService(String,Order)
~ Iterator<Student> listAllStudents()
~ Iterator<Student> listStudentsByCountry(String)
~ Iterator<Service> listAllServices()
~ Iterator<Service> listVisitedServices(Student)
~ Iterator<Service> listServicesByRanking()
~ Iterator<Service> listClosestServicesByStudent(int,String,String)
~ Iterator<Service> listServicesByTag(String)
~ Service findBestService(String,String)
}

class campus_app.entity.student.BookishStudent extends campus_app.entity.student.StudentAbstract  {
# List<Service> visited
+ StudentType getType()
+ void updatePosition(Service)
+ Iterator<Service> getVisitedServices()
}


class campus_app.entity.student.ThriftyStudent extends campus_app.entity.student.StudentAbstract {
~ EatingService cheapestEating
+ StudentType getType()
+ void updatePosition(Service)
+ Service findBestService(Iterator<Service>)
+ void moveHome(LodgingService)
+ Iterator<Service> getVisitedServices()
}

interface campus_app.entity.student.Student {
~ String getCountry()
~ String getName()
~ Service getLocation()
~ StudentType getType()
~ Service getHome()
~ void moveHome(LodgingService)
~ void updatePosition(Service)
~ Service findBestService(Iterator<Service>)
~ Iterator<Service> getVisitedServices()
~ Iterator<Service> findClosestServices(Iterator<Service>)
}

class campus_app.app.ServiceRatePredicate {
~ int rate
+ boolean check(Service)
}


class campus_app.entity.student.OutgoingStudent extends campus_app.entity.student.StudentAbstract {
# List<Service> visited
+ StudentType getType()
+ void updatePosition(Service)
+ Iterator<Service> getVisitedServices()
}


interface campus_app.entity.service.StudentStoringService extends campus_app.entity.service.Service {
~ void addUser(Student)
~ void removeUser(Student)
~ TwoWayIterator<Student> getUsers()
}

class campus_app.app.AlphabeticalStudentComparator {
+ int compare(Student,Student)
}

class campus_app.entity.student.DistanceComparator {
- Position position
+ int compare(Service,Service)
}

class campus_app.app.ByCountryPredicate {
~ String country
+ boolean check(Student)
}


class campus_app.entity.service.LodgingService extends campus_app.entity.service.AbstractStudentStoringService {
- {static} ServiceType TYPE
+ ServiceType getType()
}

class campus_app.app.ServiceStarComparator {
+ int compare(Service,Service)
}

class campus_app.app.StudentStorage {
# List<Student> students
# SortedList<Student> alphabeticalStudents
+ void addStudent(Student)
+ Student getStudent(String)
+ Student removeStudent(Student)
+ void updateStudentLocation(Student,Service)
+ void moveHome(String,LodgingService)
+ Iterator<Student> getAllStudents()
+ Iterator<Student> getStudentsByCountry(String)
+ Iterator<Service> listVisitedServices(Student)
+ Service findBestService(Student,ServiceType,Iterator<Service>)
+ Iterator<Service> findClosestService(String,Iterator<Service>)
- void readObject(ObjectInputStream)
}


interface campus_app.app.Bounds {
~ {static} String getBoundFilename(String)
~ String getName()
~ Position getTopPosition()
~ Position getBottomPosition()
~ void save()
~ boolean isInside(Position)
~ Student removeStudent(String)
~ void addService(Service)
~ Student getStudent(String)
~ void updateStudentLocation(Student,Service)
~ void moveHome(String,LodgingService)
~ Iterator<Student> getAllStudents()
~ Iterator<Student> getStudentsByCountry(String)
~ Iterator<Service> listAllServices()
~ Service findBestService(String,ServiceType)
~ Iterator<Service> listVisitedServices(Student)
~ Iterator<Service> findClosestService(String,Iterator<Service>)
~ void addStudent(Student)
~ Service getService(String)
~ Iterator<Service> listServicesByRating()
~ void addRating(int,String,String)
}

class campus_app.app.ServiceStorage {
# List<Service> services
# SortedList<Service> servicesByStar
+ void addService(Service)
+ void rateService(String,int,String)
+ Service getService(String)
+ Iterator<Service> listAllServices()
~ Iterator<Service> listServicesByRanking()
- void readObject(ObjectInputStream)
}

abstract class campus_app.entity.service.ServiceAbstract implements campus_app.entity.service.Service {
- String name
- Position position
- int price
- int value
~ int rating
~ List<String> ratings
+ void addRating(int,String)
+ int getRating()
+ float getRealRating()
+ int getPrice()
+ String getName()
+ Position getPosition()
# int getValue()
+ boolean hasTag(String)
+ boolean equals(Object)
}


class campus_app.app.ServiceTagPredicate {
- String tag
+ boolean check(Service)
}

class campus_app.entity.service.EatingService extends campus_app.entity.service.AbstractStudentStoringService {
- {static} ServiceType TYPE
+ ServiceType getType()
}

enum campus_app.entity.service.ServiceType {
+  LEISURE
+  EATING
+  LODGING
+ {static} ServiceType getType(String)
}

class campus_app.app.CampusAppClass extends campus_app.app.CampusApp {
~ Bounds currentBounds
+ void createBounds(String,long,long,long,long)
+ Bounds saveCurrentArea()
+ Bounds loadArea(String)
+ void createService(String,String,long,long,int,int)
+ void createStudent(String,String,String,String)
+ Student getStudent(String)
+ Service getService(String)
+ Student removeStudent(String)
+ boolean updateStudentPosition(Student,Service)
+ void moveHome(String,String)
+ void rateService(int,String,String)
+ TwoWayIterator<Student> getUsersByService(String,Order)
+ Iterator<Student> listAllStudents()
+ Iterator<Student> listStudentsByCountry(String)
+ Iterator<Service> listAllServices()
+ Iterator<Service> listVisitedServices(Student)
+ Iterator<Service> listServicesByRanking()
+ Iterator<Service> listServicesByTag(String)
+ Service findBestService(String,String)
+ Iterator<Service> listClosestServicesByStudent(int,String,String)
}

enum campus_app.app.Order {
+  OLD_TO_NEW
+  NEW_TO_OLD
}

enum campus_app.entity.student.StudentType {
+  THRIFTY
+  OUTGOING
+  BOOKISH
+ {static} StudentType getType(String)
}

enum user.Command {
+  BOUNDS
+  SAVE
+  LOAD
+  SERVICE
+  SERVICES
+  STUDENT
+  STUDENTS
+  LEAVE
+  GO
+  MOVE
+  USERS
+  STAR
+  WHERE
+  VISITED
+  RANKING
+  RANKED
+  TAG
+  FIND
+  HELP
+  EXIT
+  UNKNOWN
- String description
+ String getDescription()
+ {static} Command getCommand(String)
}

class user.Main {
    + void main(String[] args)
}

record campus_app.app.Position {
- long latitude
- long longitude
+ long getManhattanDistance(Position)
+ String toString()
+ long longitude()
+ long latitude()
}


abstract class campus_app.entity.service.AbstractStudentStoringService extends campus_app.entity.service.ServiceAbstract implements campus_app.entity.service.StudentStoringService {
- TwoWayList<Student> users
+ void addUser(Student)
+ void removeUser(Student)
+ TwoWayIterator<Student> getUsers()
}


interface campus_app.entity.service.Service {
~ String getName()
~ ServiceType getType()
~ Position getPosition()
~ void addRating(int,String)
~ int getRating()
~ float getRealRating()
~ int getPrice()
~ boolean hasTag(String)
}

class campus_app.app.ServiceTypePredicate {
- ServiceType type
+ boolean check(Service)
}


@enduml